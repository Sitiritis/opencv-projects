FROM quay.io/jupyter/tensorflow-notebook:cuda-2024-04-19 as jupyter-base

# Install the same dependencies in the same environment where OpenCV is
# expected to be running
COPY ./conda-requirements.txt /tmp/requirements.txt
RUN mamba install --yes --file /tmp/requirements.txt && \
  mamba clean --all -f -y && \
  fix-permissions "${CONDA_DIR}" && \
  fix-permissions "/home/${NB_USER}"

FROM nvidia/cuda:12.2.2-cudnn8-devel-ubuntu22.04 as cuda

# Copy Nvidia Codec SDK
COPY ./deps/nvidia-codec-sdk/Interface/*.h /usr/local/cuda/include
COPY ./deps/nvidia-codec-sdk/Lib/linux/stubs/x86_64/*.so /usr/local/cuda/lib64

FROM cuda as opencv-cuda-python-build

USER root

RUN <<EOF
export DEBIAN_FRONTEND=noninteractive
apt update -y
apt install -y --no-install-recommends software-properties-common
EOF

# Install python3.11
RUN <<EOF
export DEBIAN_FRONTEND=noninteractive
export PYTHON_VERSION="3.11.9-1+jammy1"

add-apt-repository -y ppa:deadsnakes/ppa
apt update -y
apt install -y --no-install-recommends \
  python3.11="${PYTHON_VERSION}" \
  python3.11-dev="${PYTHON_VERSION}" \
  python3.11-distutils \
  python3.11-gdbm
EOF

# Install build dependencies
RUN <<EOF
export DEBIAN_FRONTEND=noninteractive
export FFMPEG_VERSION="7:4.4.2-0ubuntu0.22.04.1"

apt update -y
apt install -y --no-install-recommends \
  python3-numpy=1:1.21.5-1ubuntu22.04.1 \
  python3-pip=22.0.2+dfsg-1ubuntu0.4 \
  \
  cmake=3.22.1-1ubuntu1.22.04.2 g++=4:11.2.0-1ubuntu1 gcc=4:11.2.0-1ubuntu1 ninja-build=1.10.1-1 \
  git=1:2.34.1-1ubuntu1.9 \
  rsync=3.2.7-0ubuntu0.22.04.2 \
  curl=7.81.0-1ubuntu1.16 \
  unzip=6.0-26ubuntu3.1 \
  \
  libpng-dev=1.6.37-3build5 libjpeg-dev=8c-2ubuntu10 libopenexr-dev=2.5.7-1 libtiff-dev=4.3.0-6ubuntu0.8 \
  libwebp-dev=1.2.2-2ubuntu0.22.04.2 \
  \
  libgstreamer-plugins-base1.0-dev=1.20.1-1ubuntu0.1 libgstreamer1.0-dev=1.20.3-0ubuntu1 \
  \
  "libavutil-dev=${FFMPEG_VERSION}" \
  "libavcodec-dev=${FFMPEG_VERSION}" \
  "libavformat-dev=${FFMPEG_VERSION}" \
  "libavdevice-dev=${FFMPEG_VERSION}" \
  "libavfilter-dev=${FFMPEG_VERSION}" \
  "libswscale-dev=${FFMPEG_VERSION}" \
  "libswresample-dev=${FFMPEG_VERSION}" \
  "libpostproc-dev=${FFMPEG_VERSION}"
EOF

# Make python3.11 default
RUN rm -rf /usr/bin/python3 && ln -s /usr/bin/python3.11 /usr/bin/python3

# Ensure pip is updated
RUN pip install --upgrade pip

# # Copy the same libraries as in the anaconda target environment
# # anaconda's libgio in this container, so that when we use the lib
# # from the anaconda environment, it will not fail:
# # - https://github.com/opencv/opencv/issues/7940
# # - https://github.com/opencv/opencv/issues/19958
# RUN rm -rf \
#   /usr/lib/x86_64-linux-gnu/libgio-2.0.so \
#   /usr/lib/x86_64-linux-gnu/libgio-2.0.so.0 \
#   /usr/lib/x86_64-linux-gnu/libgio-2.0.so.0.7200.4
# COPY --from=jupyter-base --chown=root:root /opt/conda/lib/libgio-2.0.so.0.8000.0 /usr/lib/x86_64-linux-gnu/libgio-2.0.so.0.8000.0

# TODO: copy these too
# /usr/lib/x86_64-linux-gnu/libcuda.so.470.239.06
# /usr/local/cuda/lib64/libnvcuvid.so
# /usr/local/cuda/lib64/libnvidia-encode.so
# /usr/lib/x86_64-linux-gnu/libgstbase-1.0.so.0.2003.0
# /usr/lib/x86_64-linux-gnu/libgstreamer-1.0.so.0.2003.0
# /usr/lib/x86_64-linux-gnu/libgobject-2.0.so.0.7200.4
# /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0.7200.4
# /usr/lib/x86_64-linux-gnu/libgstapp-1.0.so.0.2001.0
# /usr/lib/x86_64-linux-gnu/libgstriff-1.0.so.0.2001.0
# /usr/lib/x86_64-linux-gnu/libgstpbutils-1.0.so.0.2001.0
# /usr/lib/x86_64-linux-gnu/libgstvideo-1.0.so.0.2001.0
# /usr/lib/x86_64-linux-gnu/libgstaudio-1.0.so.0.2001.0
# /usr/lib/x86_64-linux-gnu/libjpeg.so.8.2.2
# /usr/lib/x86_64-linux-gnu/libwebp.so.7.1.3
# /usr/lib/x86_64-linux-gnu/libpng16.so.16.37.0
# /usr/lib/x86_64-linux-gnu/libtiff.so.5.7.0
# /usr/lib/x86_64-linux-gnu/libz.so.1.2.11
# /usr/local/cuda/lib64/libnppc.so.12
# /usr/local/cuda/lib64/libnppial.so.12
# /usr/local/cuda/lib64/libnppicc.so.12
# /usr/local/cuda/lib64/libnppidei.so.12
# /usr/local/cuda/lib64/libnppif.so.12
# /usr/local/cuda/lib64/libnppig.so.12
# /usr/local/cuda/lib64/libnppim.so.12
# /usr/local/cuda/lib64/libnppist.so.12
# /usr/local/cuda/lib64/libnppitc.so.12
# /opt/conda/lib/python3.11/site-packages/nvidia/cublas/lib/libcublas.so.12
# /opt/conda/lib/python3.11/site-packages/nvidia/cudnn/lib/libcudnn.so.8
# /opt/conda/lib/python3.11/site-packages/nvidia/cufft/lib/libcufft.so.11
# /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30
# /usr/lib/x86_64-linux-gnu/libm.so.6
# /usr/lib/x86_64-linux-gnu/libgcc_s.so.1
# /usr/lib/x86_64-linux-gnu/libc.so.6
# /usr/lib/x86_64-linux-gnu/libdl.so.2
# /usr/lib/x86_64-linux-gnu/libpthread.so.0
# /usr/lib/x86_64-linux-gnu/librt.so.1
# /usr/lib/x86_64-linux-gnu/libgmodule-2.0.so.0.7200.4
# /usr/lib/x86_64-linux-gnu/libunwind.so.8.0.1
# /usr/lib/x86_64-linux-gnu/libdw-0.186.so
# /usr/lib/x86_64-linux-gnu/libffi.so.8.1.0
# /usr/lib/x86_64-linux-gnu/libpcre.so.3.13.3
# /usr/lib/x86_64-linux-gnu/libgsttag-1.0.so.0.2001.0
# /usr/lib/x86_64-linux-gnu/liborc-0.4.so.0.32.0
# /usr/lib/x86_64-linux-gnu/libzstd.so.1.4.8
# /usr/lib/x86_64-linux-gnu/liblzma.so.5.2.5
# /usr/lib/x86_64-linux-gnu/libjbig.so.0
# /usr/lib/x86_64-linux-gnu/libdeflate.so.0
# /opt/conda/lib/python3.11/site-packages/nvidia/cublas/lib/libcublasLt.so.12
# /usr/lib/x86_64-linux-gnu/libelf-0.186.so
# /usr/lib/x86_64-linux-gnu/libbz2.so.1.0.4

COPY --from=jupyter-base --chown=root:root /opt/conda /opt/conda

# Install protobuf
RUN <<EOF
curl -L -o /tmp/protobuf.zip https://github.com/protocolbuffers/protobuf/releases/download/v26.1/protoc-26.1-linux-x86_64.zip
unzip /tmp/protobuf.zip -x "readme.txt" -d /usr/local
EOF

ARG BUILD_USER="opencv"
RUN adduser "${BUILD_USER}"

USER "${BUILD_USER}"

WORKDIR "/home/${BUILD_USER}"

# Clone OpenCV sources and checkout proper versions
RUN <<EOF
git clone --depth 1 --branch '80' 'https://github.com/opencv/opencv-python.git'
cd opencv-python

git submodule init

OPEN_CV_VERSION='4.9.0'
git submodule set-branch "${OPEN_CV_VERSION}" --branch -- opencv
git submodule set-branch "${OPEN_CV_VERSION}" --branch -- opencv_contrib
git submodule set-branch "${OPEN_CV_VERSION}" --branch -- opencv_extra

git submodule update --depth 1 --single-branch
EOF

WORKDIR "/home/${BUILD_USER}/opencv-python"

VOLUME /home/${BUILD_USER}/scripts
VOLUME /home/${BUILD_USER}/build
